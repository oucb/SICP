(define (expmod base exp m)
  (remainder (fast-expt base exp) m))
(define (fast-expt a b)
  (cond ((= b 0) 1)
        ((enev b) (square (fast-expt a (/ b 2))))
        (else (* a (fast-expt a (- b 1))))))
(define (square x)
  (* x x))
(define (enev x)
  (= (remainder x 2) 0))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ (random (- n 1)) 1)))
(define (prime-test n times)
  (cond ((= times 0) true)
        ((fermat-test n) (prime-test n (- times 1)))
        (else false)))