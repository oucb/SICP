(require srfi/19)
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((enev exp) (remainder (square (expmod base (/ exp 2) m)) m))
        (else (remainder (* base (expmod base (- exp 1) m)) m))))
(define (square x)
  (* x x))
(define (enev x)
  (= (remainder x 2) 0))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ (random (- n 1)) 1)))
(define (fast-prime n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime n (- times 1)))
        (else false)))
(define (prime-number n)
  (fast-prime n 7))
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (current-time)))
(define (start-prime-test n start-time)
  (if (prime-number n)
      (report-prime (time-difference (current-time) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
(define (search-for-prime start count)
  (cond ((= count 0)
         (newline)
         (display " end "))
        ((enev start) (search-for-prime (+ start 1) count))
        ((prime-number start) 
         (timed-prime-test start)
         (search-for-prime (+ start 2) (- count 1)))
        (else (search-for-prime  (+ start 2) count))))