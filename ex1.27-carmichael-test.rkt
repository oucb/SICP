(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((enev exp) (remainder (square (expmod base (/ exp 2) m)) m))
        (else (remainder (* base (expmod base (- exp 1) m)) m))))
(define (square x)
  (* x x))
(define (enev x)
  (= (remainder x 2) 0))
(define (prime-test a b)
  (cond ((= a 1) true)
        ((= (expmod a b b) a) (prime-test (- a 1) b))
        (else false)))
(define (prime-number n)
  (prime-test (- n 1) n))
      