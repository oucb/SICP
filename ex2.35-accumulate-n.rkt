(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      '()
      (cons (accumulate op init (func-item caar seqs))
            (accumulate-n op init (func-item cdar seqs)))))
(define (func-item func x)
  (if (null? x)
      '()
      (cons (func x) (func-item func (cdr x)))))
;(define (cdar-item x)
;  (if (null? x)
;      '()
;      (cons (cdar x) (cdar-item (cdr x)))))
(define (accumulate op init x)
  (if (null? x)
      init
      (op (car x) (accumulate op init (cdr x)))))